NeoBridge PHPアプリケーションの概要

このアプリケーションは、PHPとHTML/CSSで構築されたWebアプリケーションです。ユーザー認証、登録、プロフィール表示、ユーザー検索の機能を提供します。

1.  **データベース設定 (`db_connect.php`):**
    *   **ホスト:** `localhost`
    *   **データベース名:** `tetrocky_nb`
    *   **ユーザー名:** `tetrocky_gm`
    *   **パスワード:** `............` (これはプレースホルダーであり、本番環境では実際のパスワードに置き換える必要があります。理想的にはファイルにハードコードすべきではありません。)
    *   PDOを使用してデータベースに接続し、エラー処理のために `ATTR_ERRMODE` を `ERRMODE_EXCEPTION` に設定しています。

2.  **セッション管理:**
    *   `login.php`, `logout.php`, `profile.php`, `search.php` で `session_start()` を使用してユーザーセッションを管理しています。
    *   ログイン成功時 (`login.php`) に、`user_id`、`user_name`、`my_hobbies` が `$_SESSION` スーパーグローバルに保存されます。
    *   `logout.php` はすべてのセッション変数をクリアし、セッションを破棄します。

3.  **ユーザー認証と登録:**
    *   **登録 (`register_form.php`, `register.php`, `register_complete.php`):**
        *   ユーザーは名前、パスワード、趣味を選択して登録します。
        *   `register.php` は `password_hash(PASSWORD_DEFAULT)` を使用してパスワードをハッシュ化します。
        *   `public_id` (6文字の16進数文字列) は `substr(bin2hex(random_bytes(4)), 0, 6)` で生成されます。
        *   ユーザーデータ (public_id, name, hobbies, password_hash) は `users` テーブルに挿入されます。
        *   登録成功後、生成された `public_id` とともに `register_complete.php` にリダイレクトされます。
    *   **ログイン (`login_form.php`, `login.php`):**
        *   ユーザーは `public_id` とパスワードを使用してログインします。
        *   `login.php` は `password_verify()` を使用してパスワードを検証します。
        *   ログイン成功時、ユーザーは `search.php` にリダイレクトされます。
        *   ログイン失敗時、ユーザーはエラーとともに `login_form.php` にリダイレクトされます。

4.  **ユーザープロフィールと検索 (`search.php`, `profile.php`):**
    *   **検索 (`search.php`):**
        *   ログイン済みのユーザーが必要です (`$_SESSION['user_id']` をチェック)。
        *   他のユーザーを `public_id` で検索できます。
        *   検索クエリはGETリクエストとして `profile.php` に送信されます。
    *   **プロフィール (`profile.php`):**
        *   URLで提供された `public_id` に基づいて `users` テーブルからユーザー情報を取得します。
        *   ユーザーの名前、public ID、趣味を表示します。
        *   表示中のプロフィールとログイン中のユーザーの共通の趣味を強調表示します。

5.  **全体的な構造:**
    *   アプリケーションは、CSS (`style.css`) を使用したシンプルなHTML構造を採用しています。
    *   エラーメッセージや成功メッセージはURLパラメータ (`$_GET`) を介して渡されます。
    *   入力検証は基本的なもの (空フィールドのチェック) のみです。

6.  **セキュリティに関する考慮事項:**
    *   データベースのパスワードが `db_connect.php` にハードコードされています。本番環境では、これは安全な方法で保存されるべきです (例: 環境変数)。
    *   入力検証は最小限です。SQLインジェクションやXSSの脆弱性を防ぐために、より堅牢な検証とサニタイズが推奨されます。
    *   `public_id` は6文字の16進数文字列であり、ユーザー数によっては推測される可能性があります。



